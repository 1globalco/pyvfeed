#!/usr/bin/env python3
# API Python wrapper for The Next Generation Vulnerability & Threat Intelligence Database  - https://vfeed.io
# Copyright (C) 2013 - 2018 vFeed IO

from common import utils as utility
from lib.Database import Database


class Exploitation(object):
    def __init__(self, id):
        """ init """

        self.id = id
        (self.cur, self.query) = Database(self.id).db_init()

    def get_exploits(self):
        """ callable method - return exploits and PoC signatures"""

        # init local list
        exploits = []

        self.cur.execute("SELECT source FROM exploits_db GROUP BY source")
        self.datas = self.cur.fetchall()

        for data in self.datas:
            self.source = data[0].strip()
            responses = self.enum_exploits()

            # get only responses with valid data. Othewise the json will be huge (a lot of sources :) )
            if responses is not None:
                response = {self.source: responses}
                exploits.append(response)

        # adding the appropriate tag.
        exploits = {"exploitation": exploits}

        return utility.serialize_data(exploits)

    def enum_exploits(self):
        """ list information from different sources related to exploits and PoCs """

        # init local list
        signatures = []

        # count
        self.cur.execute(
            "SELECT count(id) FROM exploits_db WHERE (source = '{tn}') and cve_id=? order by id".format(tn=self.source),
            self.query)
        self.count = self.cur.fetchone()

        self.cur.execute(
            "SELECT * FROM exploits_db WHERE (source = '{tn}') and cve_id=? order by id".format(tn=self.source),
            self.query)
        data = self.cur.fetchall()

        for i in range(0, self.count[0]):
            # setting exploit information
            sig_id = data[i][1]
            title = data[i][2]
            file = data[i][3]
            url = data[i][4]

            # formatting the response
            response = {"id": sig_id, "parameters": {"title": title, "file": file, "url": url}}
            signatures.append(response)

        return utility.check_list_data(signatures)
